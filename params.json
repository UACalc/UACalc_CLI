{"name":"Uacalc","tagline":"Command line version of the UACalc","body":"Introduction\r\n============\r\nJython is an implementation of (the scripting language) Python in Java. It has the advantage (for us) that it can read Java libraries the the uacalc.jar library.  Therefore, the Jython interpreter can be used as a command line interface (CLI) to the UACalc.  \r\n\r\n(The functional programming language Scala provides an alternative CLI to the UACalc, as described [here](http://universalalgebra.wordpress.com/documentation/scala/scala-repl-with-uacalc-objects/).)\r\n\r\nFor more information, please visit [universalalgebra.org](http://universalalgebra.wordpress.com/documentation/uacalc/).\r\n\r\nInstallation\r\n============\r\nThere are three ways to install and configure the command line version of the UACalc.  They should all leave you with the following directories:\r\n\r\n    ~/UACalc/Algebras\r\n    ~/UACalc/Examples\r\n    ~/UACalc/UACalc_CLI\r\n\r\nincluding a script ~/UACalc/UACalc_CLI/uacalc which starts the Jython interpreter with UACalc dependencies preconfigured.\r\nIf you try any of the methods described below and you have problems, please [report the issue](https://github.com/UACalc/UACalc/issues).\r\n\r\nMethod 1: simple tar file download\r\n----------------------------------\r\nAssuming you already have Java installed, or you want to install it yourself, this \r\nmethod may work for you and is probably the simplest.\r\n\r\n1.  Download the UACalc.tar file from: http://uacalc.org/Jython/UACalc.tar\r\n    and put it in your home directory.\r\n2.  Extract this tar archive into your home directory with a command like the following:\r\n\r\n        tar xvf UACalc.tar\r\n\r\n    Or, if you already have a ~/UACalc directory, you can prevent tar from overwriting\r\n    files that are newer than those in the archive with (consider also the -w option):\r\n\r\n        tar --keep-newer-files xvf UACalc.tar\r\n\r\nMethod 2: automatic setup script for Ubuntu\r\n-------------------------------------------\r\nThe setup.sh script in this repository will automatically set up everything on Ubuntu Linux.  \r\nIf you are not using Ubuntu, you can read the comments in the setup.sh file, and do the analogous \r\nsteps for your platform.  (We are in the process of generalizing the setup.sh script so that it \r\nworks on other flavors of Linux, and eventually on Macs too.)\r\n\r\nIssue the following commands in a terminal window (at the shell prompt):\r\n\r\n1.  wget https://raw.github.com/UACalc/UACalc/master/setup.sh\r\n\r\n2.  chmod a+x setup.sh\r\n\r\n3.  ./setup.sh\r\n\r\nMethod 3: clone this git repository\r\n-----------------------------------\r\nIf you have git installed, you can clone this repository, and then copy what you need from \r\nit into your ~/UACalc directory.\r\n\r\n1.  Change to the directory where you want to keep the repository; e.g.,\r\n\r\n        cd ~/git\r\n\r\n2.  Clone the repository:\r\n\r\n        git clone git@github.com:UACalc/UACalc.git\r\n\r\n3.  Copy what you need into the right places; e.g., some subset of the following commands,\r\n    (depending on what you may already have, or what you'd like to update):\r\n\r\n        mkdir -p ~/UACalc\r\n        mkdir -p ~/UACalc/Algebras\r\n        mkdir -p ~/UACalc/Examples\r\n        cp -b ~/git/UACalc/Algebras/*.ua ~/UACalc/Algebras/\r\n        cp -b ~/git/UACalc/Examples/*.py ~/UACalc/Examples/\r\n        rsync -aiu ~/git/UACalc/UACalc_CLI/ ~/UACalc/UACalc_CLI/\r\n\r\n\r\nExecuting scripts\r\n=================\r\nStart the Jython interpreter by entering the following at the command line:\r\n\r\n    ~/UACalc/UACalc_CLI/uacalc\r\n\r\nYou may wish to put a link to this command in your ~/bin directory as follows:\r\n\r\n    ln -s ~/UACalc/UACalc_CLI/uacalc ~/bin/uacalc\r\n\r\nThe file ~/UACalc/UACalc_CLI/uacalc.py has definitions used in an interactive session, and the uacalc command invoked above is just shorthand for the following: \r\n\r\n    java -jar ~/UACalc/UACalc_CLI/Jars/jython.jar -i ~/UACalc/UACalc/UACalc_CLI/uacalc.py\r\n\r\nLook at the file ~/UACalc/Examples/AlgebraConstructionExample.py.  This is an example script showing how to use python to construct an algebra.  If you have Jython installed separately, you can run the commands in this file by typing  \r\n\r\n    jython AlgebraConstructionExample.py \r\n\r\nin a terminal window.  This will create two algebra files in the Algebras directory (which can be loaded into UACalc).  If you don't have Jython installed separately, you can run the file with\r\n\r\n    java -jar ~/UACalc/UACalc_CLI/Jars/jython.jar -i ~/UACalc/UACalc/Examples/AlgebraConstructionExample.py\r\n\r\n\r\nAn interactive session\r\n======================\r\nYou can call some hidden methods: for example, if you go to the javadoc link, click on CongruenceLattice on the left, you will find a method \r\n\r\n    commutator(BinaryRelation S, BinaryRelation T). \r\n\r\n(There are also methods for the weak and strong rectangularity commutators, as well as centrality methods.)\r\n\r\nThe sample interactive session below does the following:\r\n\r\n1.  Read in the algebra f3 (the reduct of the three element field to multiplication).\r\n\r\n2.  Check its cardinality.\r\n\r\n3.  Define theta to be the nontrivial congruence and define one to be the top.\r\n\r\n4.  Check the commutator [theta,one] = zero but [one,theta] = theta.\r\n\r\n5.  Quit.\r\n\r\n        [ralph@mahiloa:~/UACalc/UACalc_CLI]$ uacalc\r\n        \r\n        Starting Jython with UACalc dependencies.  Please be patient...\r\n\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        Welcome to the command line version of UACalc!\r\n            to exit type quit()\r\n            (more help coming)\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        >>> f3 = AlgebraIO.readAlgebraFile(\"/home/ralph/UACalc/Algebras/f3.ua\")\r\n        >>> f3.cardinality()\r\n        3\r\n        >>> conlat = f3.con().getUniverseList()\r\n        >>> conlat\r\n        [|0|1|2|, |0|1,2|, |0,1,2|]\r\n        >>> theta = conlat[1]\r\n        >>> theta\r\n        |0|1,2|\r\n        >>> one = conlat[2]\r\n        >>> one\r\n        |0,1,2|\r\n        >>> f3.con().commutator(theta,one)\r\n        |0|1|2|\r\n        >>> f3.con().commutator(one,theta)\r\n        |0|1,2|\r\n        >>> quit()\r\n\r\n\r\nNotes/reminders for the administrators\r\n--------------------------------------\r\nTo create a new tar file from the git repository, use the following commands:\r\n\r\n    cd ~/git    # assuming repository is in ~/git/UACalc\r\n    tar --exclude=.git --exclude=setup.sh --exclude=*~ -cvf UACalc.tar UACalc\r\n\r\nThis excludes the git repository and the setup.sh file from the resulting UACalc.tar file.\r\nWe might also consider the -u (update) option to only append files that are newer than \r\nthose already in the archive.\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}